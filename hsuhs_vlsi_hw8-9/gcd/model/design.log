
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 95fb3cf, clang 3.4.2 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: gcd.sv
Parsing formal SystemVerilog input from `gcd.sv' to AST representation.
Storing AST representation for module `$abstract\gcd'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: gcd_ctrl.sv
Parsing formal SystemVerilog input from `gcd_ctrl.sv' to AST representation.
Storing AST representation for module `$abstract\gcd_ctrl'.
Successfully finished Verilog frontend.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\gcd'.
Generating RTLIL representation for module `\gcd'.

3.2.1. Analyzing design hierarchy..
Top module:  \gcd

3.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\gcd_ctrl'.
Generating RTLIL representation for module `\gcd_ctrl'.

3.2.3. Analyzing design hierarchy..
Top module:  \gcd
Used module:     \gcd_ctrl

3.2.4. Analyzing design hierarchy..
Top module:  \gcd
Used module:     \gcd_ctrl
Removing unused module `$abstract\gcd_ctrl'.
Removing unused module `$abstract\gcd'.
Removed 2 unused modules.
Module gcd directly or indirectly contains formal properties -> setting "keep" attribute.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$gcd_ctrl.sv:0$21 in module gcd_ctrl.
Marked 4 switch rules as full_case in process $proc$gcd_ctrl.sv:0$21 in module gcd_ctrl.
Marked 1 switch rules as full_case in process $proc$gcd_ctrl.sv:20$19 in module gcd_ctrl.
Marked 2 switch rules as full_case in process $proc$gcd.sv:43$11 in module gcd.
Marked 2 switch rules as full_case in process $proc$gcd.sv:36$9 in module gcd.
Marked 2 switch rules as full_case in process $proc$gcd.sv:29$7 in module gcd.
Removed a total of 1 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\gcd.$proc$gcd.sv:0$17'.
  Set init value: $formal$gcd.sv:21$1_EN = 1'0

3.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_n in `\gcd_ctrl.$proc$gcd_ctrl.sv:20$19'.
Found async reset \reset_n in `\gcd.$proc$gcd.sv:43$11'.
Found async reset \reset_n in `\gcd.$proc$gcd.sv:29$7'.
Found async reset \reset_n in `\gcd.$proc$gcd.sv:20$2'.

3.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\gcd_ctrl.$proc$gcd_ctrl.sv:0$21'.
     1/4: $4\ns[1:0]
     2/4: $3\ns[1:0]
     3/4: $2\ns[1:0]
     4/4: $1\ns[1:0]
Creating decoders for process `\gcd_ctrl.$proc$gcd_ctrl.sv:20$19'.
     1/1: $0\ps[1:0]
Creating decoders for process `\gcd.$proc$gcd.sv:0$17'.
Creating decoders for process `\gcd.$proc$gcd.sv:43$11'.
     1/1: $0\done[0:0]
Creating decoders for process `\gcd.$proc$gcd.sv:36$9'.
     1/1: $0\result[31:0]
Creating decoders for process `\gcd.$proc$gcd.sv:29$7'.
     1/1: $0\register_b[31:0]
Creating decoders for process `\gcd.$proc$gcd.sv:20$2'.
     1/2: $0$formal$gcd.sv:21$1_EN[0:0]$4
     2/2: $0$formal$gcd.sv:21$1_CHECK[0:0]$3

3.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\gcd_ctrl.\ns' from process `\gcd_ctrl.$proc$gcd_ctrl.sv:0$21'.

3.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\gcd_ctrl.\ps' using process `\gcd_ctrl.$proc$gcd_ctrl.sv:20$19'.
  created $adff cell `$procdff$73' with positive edge clock and negative level reset.
Creating register for signal `\gcd.\done' using process `\gcd.$proc$gcd.sv:43$11'.
  created $adff cell `$procdff$74' with positive edge clock and negative level reset.
Creating register for signal `\gcd.\result' using process `\gcd.$proc$gcd.sv:36$9'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\gcd.\register_b' using process `\gcd.$proc$gcd.sv:29$7'.
  created $adff cell `$procdff$76' with positive edge clock and negative level reset.
Creating register for signal `\gcd.$formal$gcd.sv:21$1_CHECK' using process `\gcd.$proc$gcd.sv:20$2'.
Warning: Async reset value `$eq$gcd.sv:22$6_Y' is not constant!
  created $dffsr cell `$procdff$77' with positive edge clock and negative level non-const reset.
Creating register for signal `\gcd.$formal$gcd.sv:21$1_EN' using process `\gcd.$proc$gcd.sv:20$2'.
  created $adff cell `$procdff$84' with positive edge clock and negative level reset.

3.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\gcd_ctrl.$proc$gcd_ctrl.sv:0$21'.
Removing empty process `gcd_ctrl.$proc$gcd_ctrl.sv:0$21'.
Removing empty process `gcd_ctrl.$proc$gcd_ctrl.sv:20$19'.
Removing empty process `gcd.$proc$gcd.sv:0$17'.
Found and cleaned up 1 empty switch in `\gcd.$proc$gcd.sv:43$11'.
Removing empty process `gcd.$proc$gcd.sv:43$11'.
Found and cleaned up 3 empty switches in `\gcd.$proc$gcd.sv:36$9'.
Removing empty process `gcd.$proc$gcd.sv:36$9'.
Found and cleaned up 2 empty switches in `\gcd.$proc$gcd.sv:29$7'.
Removing empty process `gcd.$proc$gcd.sv:29$7'.
Removing empty process `gcd.$proc$gcd.sv:20$2'.
Cleaned up 10 empty switches.

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_ctrl.
<suppressed ~4 debug messages>
Optimizing module gcd.
<suppressed ~1 debug messages>

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_ctrl..
Finding unused cells or wires in module \gcd..
Removed 5 unused cells and 34 unused wires.
<suppressed ~8 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
checking module gcd..
checking module gcd_ctrl..
found and reported 0 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd.
Optimizing module gcd_ctrl.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcd_ctrl'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcd_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$33.
    dead port 2/2 on $mux $procmux$35.
    dead port 2/2 on $mux $procmux$42.
    dead port 2/2 on $mux $procmux$50.
Removed 4 multiplexer ports.
<suppressed ~6 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd.
  Optimizing cells in module \gcd_ctrl.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcd_ctrl'.
Removed a total of 0 cells.

3.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcd_ctrl..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd.
Optimizing module gcd_ctrl.

3.7.9. Rerunning OPT passes. (Maybe there is more to do..)

3.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \gcd_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

3.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd.
  Optimizing cells in module \gcd_ctrl.
Performed a total of 0 changes.

3.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcd_ctrl'.
Removed a total of 0 cells.

3.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcd_ctrl..

3.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd.
Optimizing module gcd_ctrl.

3.7.16. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell gcd_ctrl.$eq$gcd_ctrl.sv:36$22 ($eq).
Removed top 1 bits (of 2) from port B of cell gcd_ctrl.$procmux$54_CMP0 ($eq).

3.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcd_ctrl..

3.11. Executing MEMORY_COLLECT pass (generating $mem cells).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd.
Optimizing module gcd_ctrl.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcd_ctrl'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcd_ctrl..

3.12.5. Finished fast OPT passes.

3.13. Printing statistics.

=== gcd ===

   Number of wires:                 27
   Number of wire bits:            337
   Number of public wires:          14
   Number of public wire bits:     138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $adff                           3
     $assert                         1
     $dff                            1
     $dffsr                          1
     $eq                             1
     $logic_not                      1
     $lt                             1
     $mux                            8
     $not                            1
     $sub                            1
     gcd_ctrl                        1

=== gcd_ctrl ===

   Number of wires:                 18
   Number of wire bits:             23
   Number of public wires:          10
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $adff                           1
     $eq                             6
     $logic_and                      1
     $logic_not                      1
     $mux                            3
     $pmux                           1

=== design hierarchy ===

   gcd                               1
     gcd_ctrl                        1

   Number of wires:                 45
   Number of wire bits:            360
   Number of public wires:          24
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $adff                           4
     $assert                         1
     $dff                            1
     $dffsr                          1
     $eq                             7
     $logic_and                      1
     $logic_not                      2
     $lt                             1
     $mux                           11
     $not                            1
     $pmux                           1
     $sub                            1

3.14. Executing CHECK pass (checking for obvious problems).
checking module gcd..
checking module gcd_ctrl..
found and reported 0 problems.

4. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

5. Executing ASYNC2SYNC pass.
Replacing gcd.$procdff$74 ($adff): ARST=\reset_n, D=$0\done[0:0], Q=\done
Replacing gcd.$procdff$76 ($adff): ARST=\reset_n, D=$0\register_b[31:0], Q=\register_b
Replacing gcd.$procdff$77 ($dffsr): SET=$auto$proc_dff.cc:153:gen_dffsr$79, CLR=$auto$proc_dff.cc:154:gen_dffsr$80, D=1'x, Q=$formal$gcd.sv:21$1_CHECK
Replacing gcd.$procdff$84 ($adff): ARST=\reset_n, D=1'0, Q=$formal$gcd.sv:21$1_EN
Replacing gcd_ctrl.$procdff$73 ($adff): ARST=\reset_n, D=\ns, Q=\ps

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcd_ctrl..

7. Executing SETUNDEF pass (replace undef values with defined constants).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd.
Optimizing module gcd_ctrl.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd'.
Finding identical cells in module `\gcd_ctrl'.
Removed a total of 0 cells.

8.3. Executing OPT_RMDFF pass (remove dff with constant values).

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd..
Finding unused cells or wires in module \gcd_ctrl..

8.5. Finished fast OPT passes.

9. Executing CHECK pass (checking for obvious problems).
checking module gcd..
checking module gcd_ctrl..
found and reported 0 problems.

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \gcd
Used module:     \gcd_ctrl

10.2. Analyzing design hierarchy..
Top module:  \gcd
Used module:     \gcd_ctrl
Removed 0 unused modules.
Module gcd directly or indirectly contains formal properties -> setting "keep" attribute.

11. Executing ILANG backend.
Output filename: ../model/design.il

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 417e5b0a94, CPU: user 0.05s system 0.00s, MEM: 6.09 MB peak
Yosys 0.9+2406 (git sha1 95fb3cf, clang 3.4.2 -fPIC -Os)
Time spent: 24% 3x check (0 sec), 21% 6x opt_expr (0 sec), ...
